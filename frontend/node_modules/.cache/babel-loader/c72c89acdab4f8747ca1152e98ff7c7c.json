{"ast":null,"code":"import { FIND_TASKS, GET_TASKS } from \"../../actions/Tasks/types\";\nconst initial_state = {\n  tasks: [],\n  loading_tasks: false,\n  task: {\n    id: 0,\n    name: \"\"\n  },\n  tasks_errors: {}\n};\n\nconst TasksStore = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === GET_TASKS) {\n    var _action$tasks_errors;\n\n    return { ...state,\n      tasks: action.tasks,\n      loading_tasks: action === null || action === void 0 ? void 0 : action.loading_tasks,\n      tasks_errors: (_action$tasks_errors = action === null || action === void 0 ? void 0 : action.tasks_errors) !== null && _action$tasks_errors !== void 0 ? _action$tasks_errors : {}\n    };\n  }\n\n  if (action.type === GET_TASKS) {\n    var _action$tasks_errors2;\n\n    return { ...state,\n      tasks: action.tasks,\n      loading_tasks: action === null || action === void 0 ? void 0 : action.loading_tasks,\n      tasks_errors: (_action$tasks_errors2 = action === null || action === void 0 ? void 0 : action.tasks_errors) !== null && _action$tasks_errors2 !== void 0 ? _action$tasks_errors2 : {}\n    };\n  }\n\n  if (action.type === FIND_TASKS) {\n    var _action$tasks_errors3, _action$task;\n\n    return { ...state,\n      loading_tasks: action === null || action === void 0 ? void 0 : action.loading_tasks,\n      tasks_errors: (_action$tasks_errors3 = action === null || action === void 0 ? void 0 : action.tasks_errors) !== null && _action$tasks_errors3 !== void 0 ? _action$tasks_errors3 : {},\n      task: (_action$task = action === null || action === void 0 ? void 0 : action.task) !== null && _action$task !== void 0 ? _action$task : {}\n    };\n  }\n\n  return state;\n};\n\n_c = TasksStore;\nexport default TasksStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksStore\");","map":{"version":3,"sources":["/Users/collegia/Documents/projects/todolist/frontend/src/store/Tasks/index.js"],"names":["FIND_TASKS","GET_TASKS","initial_state","tasks","loading_tasks","task","id","name","tasks_errors","TasksStore","state","action","type"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,SAApB,QAAoC,2BAApC;AAEA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,aAAa,EAAE,KAFM;AAGrBC,EAAAA,IAAI,EAAE;AACLC,IAAAA,EAAE,EAAE,CADC;AAELC,IAAAA,IAAI,EAAE;AAFD,GAHe;AAOrBC,EAAAA,YAAY,EAAE;AAPO,CAAtB;;AAUA,MAAMC,UAAU,GAAG,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BR,aAA0B;AAAA,MAAXS,MAAW;;AAErD,MAAIA,MAAM,CAACC,IAAP,KAAgBX,SAApB,EAA+B;AAAA;;AAC9B,WAAO,EACN,GAAGS,KADG;AAENP,MAAAA,KAAK,EAAEQ,MAAM,CAACR,KAFR;AAGNC,MAAAA,aAAa,EAAEO,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEP,aAHjB;AAINI,MAAAA,YAAY,0BAAEG,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEH,YAAV,uEAA0B;AAJhC,KAAP;AAMA;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgBX,SAApB,EAA+B;AAAA;;AAC9B,WAAO,EACN,GAAGS,KADG;AAENP,MAAAA,KAAK,EAAEQ,MAAM,CAACR,KAFR;AAGNC,MAAAA,aAAa,EAAEO,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEP,aAHjB;AAINI,MAAAA,YAAY,2BAAEG,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEH,YAAV,yEAA0B;AAJhC,KAAP;AAMA;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgBZ,UAApB,EAAgC;AAAA;;AAC/B,WAAO,EACN,GAAGU,KADG;AAENN,MAAAA,aAAa,EAAEO,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEP,aAFjB;AAGNI,MAAAA,YAAY,2BAAEG,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEH,YAAV,yEAA0B,EAHhC;AAINH,MAAAA,IAAI,kBAAEM,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEN,IAAV,uDAAkB;AAJhB,KAAP;AAMA;;AAED,SAAOK,KAAP;AACA,CA7BD;;KAAMD,U;AA+BN,eAAeA,UAAf","sourcesContent":["import {FIND_TASKS, GET_TASKS} from \"../../actions/Tasks/types\";\n\nconst initial_state = {\n\ttasks: [],\n\tloading_tasks: false,\n\ttask: {\n\t\tid: 0,\n\t\tname: \"\",\n\t},\n\ttasks_errors: {},\n}\n\nconst TasksStore = (state = initial_state, action) => {\n\n\tif (action.type === GET_TASKS) {\n\t\treturn {\n\t\t\t...state,\n\t\t\ttasks: action.tasks,\n\t\t\tloading_tasks: action?.loading_tasks,\n\t\t\ttasks_errors: action?.tasks_errors ?? {},\n\t\t}\n\t}\n\tif (action.type === GET_TASKS) {\n\t\treturn {\n\t\t\t...state,\n\t\t\ttasks: action.tasks,\n\t\t\tloading_tasks: action?.loading_tasks,\n\t\t\ttasks_errors: action?.tasks_errors ?? {},\n\t\t}\n\t}\n\n\tif (action.type === FIND_TASKS) {\n\t\treturn {\n\t\t\t...state,\n\t\t\tloading_tasks: action?.loading_tasks,\n\t\t\ttasks_errors: action?.tasks_errors ?? {},\n\t\t\ttask: action?.task ?? {},\n\t\t}\n\t}\n\n\treturn state;\n}\n\nexport default TasksStore;"]},"metadata":{},"sourceType":"module"}