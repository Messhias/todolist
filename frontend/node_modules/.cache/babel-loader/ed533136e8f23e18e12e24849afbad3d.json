{"ast":null,"code":"var _jsxFileName = \"/Users/collegia/Documents/projects/todolist/frontend/src/components/Task/TaskDetails.js\",\n    _this = this;\n\nimport * as React from 'react';\nimport Modal from '@mui/material/Modal';\nimport { Grid } from \"@mui/material\";\nimport TaskDetailsHeader from \"./TaskDetailsHeader\";\nimport TaskMainContent from \"./TaskMainContent\";\nimport TaskDetailFooter from \"./TaskDetailFooter\";\nimport PropTypes from \"prop-types\";\n/**\n * @param props\n * @returns {JSX.Element}\n * @private\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst _renderContent = function () {\n  var _props$status;\n\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    task: {\n      id: 0,\n      name: \"\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    xs: 12,\n    sm: 12,\n    lg: 12,\n    md: 12,\n    id: \"task-details-body-wrapper\",\n    item: true,\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(TaskDetailsHeader, {\n      handleClose: props.handleChangeModal,\n      taskModalOpen: props.taskModalOpen,\n      find: props.find,\n      task: props.task,\n      update: props.update,\n      status: (_props$status = props === null || props === void 0 ? void 0 : props.status) !== null && _props$status !== void 0 ? _props$status : []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(TaskMainContent, {\n      task: props.task,\n      update: props.update\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(TaskDetailFooter, {\n      task: props.task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, _this);\n};\n\nconst TaskDetails = function () {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    taskModalOpen: false,\n    loading_tasks: false,\n    handleChangeModal: function () {\n      let open = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    },\n    find: id => {},\n    update: (id, body) => {},\n    status: []\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12,\n    item: true,\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      open: props.taskModalOpen,\n      onClose: () => {\n        props.handleChangeModal(!props.taskModalOpen);\n        props.find(false);\n      },\n      className: \"task-detail-modal-container\",\n      children: _renderContent(props)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = TaskDetails;\nTaskDetails.propTypes = {\n  taskModalOpen: PropTypes.bool,\n  loading_tasks: PropTypes.bool,\n  handleChangeModal: PropTypes.func,\n  find: PropTypes.func,\n  update: PropTypes.func,\n  status: PropTypes.array,\n  task: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired\n  }).isRequired\n};\nexport default TaskDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDetails\");","map":{"version":3,"sources":["/Users/collegia/Documents/projects/todolist/frontend/src/components/Task/TaskDetails.js"],"names":["React","Modal","Grid","TaskDetailsHeader","TaskMainContent","TaskDetailFooter","PropTypes","_renderContent","props","task","id","name","handleChangeModal","taskModalOpen","find","update","status","TaskDetails","loading_tasks","open","body","propTypes","bool","func","array","shape","number","isRequired","string"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Modal from '@mui/material/Modal';\nimport {Grid} from \"@mui/material\";\nimport TaskDetailsHeader from \"./TaskDetailsHeader\";\nimport TaskMainContent from \"./TaskMainContent\";\nimport TaskDetailFooter from \"./TaskDetailFooter\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @param props\n * @returns {JSX.Element}\n * @private\n */\nconst _renderContent = (props = {\n\ttask: {\n\t\tid: 0,\n\t\tname: \"\",\n\t}\n}) => {\n\n\treturn (\n\n\t\t<Grid\n\t\t\txs={12}\n\t\t\tsm={12}\n\t\t\tlg={12}\n\t\t\tmd={12}\n\t\t\tid={\"task-details-body-wrapper\"}\n\t\t\titem\n\t\t\tcontainer\n\t\t>\n\t\t\t<TaskDetailsHeader\n\t\t\t\thandleClose={props.handleChangeModal}\n\t\t\t\ttaskModalOpen={props.taskModalOpen}\n\t\t\t\tfind={props.find}\n\t\t\t\ttask={props.task}\n\t\t\t\tupdate={props.update}\n\t\t\t\tstatus={props?.status ?? []}\n\t\t\t/>\n\t\t\t<TaskMainContent\n\t\t\t\ttask={props.task}\n\t\t\t\tupdate={props.update}\n\t\t\t/>\n\t\t\t<TaskDetailFooter\n\t\t\t\ttask={props.task}\n\t\t\t/>\n\t\t</Grid>\n\t);\n}\n\n\nconst TaskDetails = (props = {\n\ttaskModalOpen: false,\n\tloading_tasks: false,\n\thandleChangeModal: (open = false) => {},\n\tfind: (id) => {},\n\tupdate: (id, body) => {},\n\tstatus: [],\n}) => {\n\n\treturn (\n\t\t<Grid\n\t\t\txs={12}\n\t\t\tsm={12}\n\t\t\tmd={12}\n\t\t\tlg={12}\n\t\t\titem\n\t\t\tcontainer\n\t\t>\n\t\t\t<Modal\n\t\t\t\topen={props.taskModalOpen}\n\t\t\t\tonClose={() => {\n\t\t\t\t\tprops.handleChangeModal(!props.taskModalOpen);\n\t\t\t\t\tprops.find(false);\n\t\t\t\t}}\n\t\t\t\tclassName={\"task-detail-modal-container\"}\n\t\t\t>\n\t\t\t\t{_renderContent(props)}\n\t\t\t</Modal>\n\t\t</Grid>\n\t);\n};\n\nTaskDetails.propTypes = {\n\ttaskModalOpen: PropTypes.bool,\n    loading_tasks: PropTypes.bool,\n    handleChangeModal: PropTypes.func,\n    find: PropTypes.func,\n    update: PropTypes.func,\n    status: PropTypes.array,\n\ttask: PropTypes.shape({\n\t\tid: PropTypes.number.isRequired,\n\t\tname: PropTypes.string.isRequired\n\t}).isRequired,\n};\n\nexport default TaskDetails;\n"]},"metadata":{},"sourceType":"module"}