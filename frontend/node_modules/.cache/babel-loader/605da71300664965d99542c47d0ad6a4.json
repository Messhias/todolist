{"ast":null,"code":"var _jsxFileName = \"/Users/collegia/Documents/projects/todolist/frontend/src/components/Task/TaskChangeStatus.js\",\n    _this = this;\n\nimport { FormControl, Grid, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\n/**\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskChangeStatus = function () {\n  var _props$status, _props$task$status$id, _props$task, _props$task$status, _props$status2;\n\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    task: {\n      id: null,\n      status: {\n        id: null\n      }\n    },\n    status: [],\n    update: (id, data) => {}\n  };\n  return (props === null || props === void 0 ? void 0 : (_props$status = props.status) === null || _props$status === void 0 ? void 0 : _props$status.length) > 0 && /*#__PURE__*/_jsxDEV(Grid, {\n    xs: 2,\n    sm: 2,\n    md: 2,\n    lg: 2,\n    alignContent: \"center\",\n    alignItems: \"center\",\n    direction: 'column',\n    item: true,\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"task-status-label-change\",\n        children: \"Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, _this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"task-status-label-change\",\n        id: \"task-status-select\",\n        label: \"Status\",\n        value: (_props$task$status$id = props === null || props === void 0 ? void 0 : (_props$task = props.task) === null || _props$task === void 0 ? void 0 : (_props$task$status = _props$task.status) === null || _props$task$status === void 0 ? void 0 : _props$task$status.id) !== null && _props$task$status$id !== void 0 ? _props$task$status$id : 0,\n        onChange: event => {\n          var _props$task2;\n\n          return props.update(props === null || props === void 0 ? void 0 : (_props$task2 = props.task) === null || _props$task2 === void 0 ? void 0 : _props$task2.id, {\n            status_id: event.target.value\n          });\n        },\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: 0,\n          children: \"Choose the task status\"\n        }, 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 6\n        }, _this), props === null || props === void 0 ? void 0 : (_props$status2 = props.status) === null || _props$status2 === void 0 ? void 0 : _props$status2.map(s => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: s.id,\n          children: s.name\n        }, s.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 8\n        }, _this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = TaskChangeStatus;\nTaskChangeStatus.propTypes = {\n  task: PropTypes.object.isRequired,\n  update: PropTypes.func.isRequired,\n  status: PropTypes.array.isRequired\n};\nexport default TaskChangeStatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskChangeStatus\");","map":{"version":3,"sources":["/Users/collegia/Documents/projects/todolist/frontend/src/components/Task/TaskChangeStatus.js"],"names":["FormControl","Grid","InputLabel","MenuItem","Select","React","PropTypes","TaskChangeStatus","props","task","id","status","update","data","length","event","status_id","target","value","map","s","name","propTypes","object","isRequired","func","array"],"mappings":";;;AAAA,SAAQA,WAAR,EAAqBC,IAArB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,MAAjD,QAA8D,eAA9D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,gBAAgB,GAAG;AAAA;;AAAA,MACxBC,KADwB,uEAChB;AACPC,IAAAA,IAAI,EAAE;AACLC,MAAAA,EAAE,EAAE,IADC;AAELC,MAAAA,MAAM,EAAE;AACPD,QAAAA,EAAE,EAAE;AADG;AAFH,KADC;AAOPC,IAAAA,MAAM,EAAE,EAPD;AAQPC,IAAAA,MAAM,EAAE,CAACF,EAAD,EAAKG,IAAL,KAAc,CACrB;AATM,GADgB;AAAA,SAcxB,CAAAL,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEG,MAAP,gEAAeG,MAAf,IAAwB,CAAxB,iBACC,QAAC,IAAD;AACC,IAAA,EAAE,EAAE,CADL;AAEC,IAAA,EAAE,EAAE,CAFL;AAGC,IAAA,EAAE,EAAE,CAHL;AAIC,IAAA,EAAE,EAAE,CAJL;AAKC,IAAA,YAAY,EAAE,QALf;AAMC,IAAA,UAAU,EAAE,QANb;AAOC,IAAA,SAAS,EAAE,QAPZ;AAQC,IAAA,IAAI,MARL;AASC,IAAA,SAAS,MATV;AAAA,2BAWC,QAAC,WAAD;AAAa,MAAA,SAAS,MAAtB;AAAA,8BACC,QAAC,UAAD;AAAY,QAAA,EAAE,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD,eAEC,QAAC,MAAD;AACC,QAAA,OAAO,EAAC,0BADT;AAEC,QAAA,EAAE,EAAC,oBAFJ;AAGC,QAAA,KAAK,EAAC,QAHP;AAIC,QAAA,KAAK,2BAAEN,KAAF,aAAEA,KAAF,sCAAEA,KAAK,CAAEC,IAAT,sEAAE,YAAaE,MAAf,uDAAE,mBAAqBD,EAAvB,yEAA6B,CAJnC;AAKC,QAAA,QAAQ,EAAEK,KAAK;AAAA;;AAAA,iBAAIP,KAAK,CAACI,MAAN,CAAaJ,KAAb,aAAaA,KAAb,uCAAaA,KAAK,CAAEC,IAApB,iDAAa,aAAaC,EAA1B,EAA8B;AAChDM,YAAAA,SAAS,EAAED,KAAK,CAACE,MAAN,CAAaC;AADwB,WAA9B,CAAJ;AAAA,SALhB;AAAA,gCASC,QAAC,QAAD;AAEC,UAAA,KAAK,EAAE,CAFR;AAAA;AAAA,WACM,CADN;AAAA;AAAA;AAAA;AAAA,iBATD,EAgBEV,KAhBF,aAgBEA,KAhBF,yCAgBEA,KAAK,CAAEG,MAhBT,mDAgBE,eAAeQ,GAAf,CAAmBC,CAAC,iBACnB,QAAC,QAAD;AAEC,UAAA,KAAK,EAAEA,CAAC,CAACV,EAFV;AAAA,oBAIEU,CAAC,CAACC;AAJJ,WACMD,CAAC,CAACV,EADR;AAAA;AAAA;AAAA;AAAA,iBADD,CAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,eAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAXD;AAAA;AAAA;AAAA;AAAA,WAfuB;AAAA,CAAzB;;KAAMH,gB;AA2DNA,gBAAgB,CAACe,SAAjB,GAA6B;AAC5Bb,EAAAA,IAAI,EAAEH,SAAS,CAACiB,MAAV,CAAiBC,UADK;AAE5BZ,EAAAA,MAAM,EAAEN,SAAS,CAACmB,IAAV,CAAeD,UAFK;AAG5Bb,EAAAA,MAAM,EAAEL,SAAS,CAACoB,KAAV,CAAgBF;AAHI,CAA7B;AAMA,eAAejB,gBAAf","sourcesContent":["import {FormControl, Grid, InputLabel, MenuItem, Select} from \"@mui/material\";\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nconst TaskChangeStatus = (\n\tprops = {\n\t\ttask: {\n\t\t\tid: null,\n\t\t\tstatus: {\n\t\t\t\tid: null,\n\t\t\t}\n\t\t},\n\t\tstatus: [],\n\t\tupdate: (id, data) => {\n\t\t},\n\t}\n): JSX.Element => (\n\n\tprops?.status?.length > 0 && (\n\t\t<Grid\n\t\t\txs={2}\n\t\t\tsm={2}\n\t\t\tmd={2}\n\t\t\tlg={2}\n\t\t\talignContent={\"center\"}\n\t\t\talignItems={\"center\"}\n\t\t\tdirection={'column'}\n\t\t\titem\n\t\t\tcontainer\n\t\t>\n\t\t\t<FormControl fullWidth>\n\t\t\t\t<InputLabel id=\"task-status-label-change\">Status</InputLabel>\n\t\t\t\t<Select\n\t\t\t\t\tlabelId=\"task-status-label-change\"\n\t\t\t\t\tid=\"task-status-select\"\n\t\t\t\t\tlabel=\"Status\"\n\t\t\t\t\tvalue={props?.task?.status?.id ?? 0}\n\t\t\t\t\tonChange={event => props.update(props?.task?.id, {\n\t\t\t\t\t\tstatus_id: event.target.value\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tkey={0}\n\t\t\t\t\t\tvalue={0}\n\t\t\t\t\t>\n\t\t\t\t\t\tChoose the task status\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t{\n\t\t\t\t\t\tprops?.status?.map(s =>\n\t\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\t\tkey={s.id}\n\t\t\t\t\t\t\t\tvalue={s.id}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{s.name}\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</Grid>\n\t)\n);\n\nTaskChangeStatus.propTypes = {\n\ttask: PropTypes.object.isRequired,\n\tupdate: PropTypes.func.isRequired,\n\tstatus: PropTypes.array.isRequired,\n}\n\nexport default TaskChangeStatus;"]},"metadata":{},"sourceType":"module"}