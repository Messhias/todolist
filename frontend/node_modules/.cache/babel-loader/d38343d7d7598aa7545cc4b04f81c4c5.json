{"ast":null,"code":"var _jsxFileName = \"/Users/collegia/Documents/projects/todolist/frontend/src/components/MainPage/Table/TaskListTableBody.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport * as React from \"react\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { useDrag } from \"react-dnd\";\nimport { ItemTypes } from \"../../../Pages/Test\";\n/**\n * @param task\n * @param actualStatus\n * @returns {JSX.Element}\n * @private\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst _renderCommonColumns = function () {\n  let task = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    id: null,\n    name: \"\",\n    is_closed: false,\n    status: {\n      name: \"\"\n    },\n    formatted_created_date: \"\",\n    deadline: \"\"\n  };\n  let actualStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    name: \"\"\n  };\n  let props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n      onClick: () => {\n        props === null || props === void 0 ? void 0 : props.handleChangeModal(props.taskModalOpen);\n        props.find(task.id);\n      },\n      children: task === null || task === void 0 ? void 0 : task.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 3\n    }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: task === null || task === void 0 ? void 0 : task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: (task === null || task === void 0 ? void 0 : task.is_closed) ? \"Closed\" : \"Open\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 3\n    }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: actualStatus === null || actualStatus === void 0 ? void 0 : actualStatus.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: task === null || task === void 0 ? void 0 : task.deadline\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: task === null || task === void 0 ? void 0 : task.formatted_created_date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }, _this)]\n  }, void 0, true);\n};\n/**\n * @param task\n * @param status\n * @param changeStatusOptionsOpen\n * @param props\n * @returns {JSX.Element}\n * @private\n */\n\n\nconst _renderActionButtons = (task, status, changeStatusOptionsOpen, props) => {\n  return /*#__PURE__*/_jsxDEV(TableCell, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      id: task.id,\n      \"aria-expanded\": changeStatusOptionsOpen ? 'true' : undefined,\n      onClick: () => {\n        props.getStatus();\n        props.component.setState({\n          changeStatusOptionsOpen: !changeStatusOptionsOpen,\n          taskId: task.id\n        });\n      },\n      children: \"CHANGE STATUS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      id: task.id,\n      \"aria-expanded\": changeStatusOptionsOpen ? 'true' : undefined,\n      onClick: () => {\n        props.history.push(`/tasks/edit/${task.id}`);\n      },\n      children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"delete-button\",\n      id: task.id,\n      \"aria-expanded\": changeStatusOptionsOpen ? 'true' : undefined,\n      onClick: () => props.erase(task.id),\n      children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 3\n  }, this);\n};\n/**\n * @param tasks\n * @param status\n * @param changeStatusOptionsOpen\n * @param props\n * @param actualStatus\n * @returns {JSX.Element|*}\n * @private\n */\n\n\nconst _renderTasks = (tasks, status, changeStatusOptionsOpen, props, actualStatus) => {\n  _s();\n\n  const [, drag] = useDrag(() => ({\n    type: ItemTypes.BOX,\n    item: tasks,\n    end: (item, monitor) => {\n      console.log(item, monitor);\n      const dropResult = monitor.getDropResult();\n\n      if (item && dropResult) {\n        alert(`You dropped ${item.name} into ${dropResult.name}!`);\n      }\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n      handlerId: monitor.getHandlerId()\n    })\n  }));\n\n  if (tasks.length > 0) {\n    return tasks.map(t => {\n      return /*#__PURE__*/_jsxDEV(TableRow, {\n        \"data-id\": t.id,\n        children: [_renderCommonColumns(t, actualStatus), _renderActionButtons(t, status, changeStatusOptionsOpen, props)]\n      }, t.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(TableRow, {\n    children: /*#__PURE__*/_jsxDEV(TableCell, {\n      colSpan: 6,\n      children: \"NO TASKS FOUND\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 3\n  }, this);\n};\n/**\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\n\n\n_s(_renderTasks, \"MI5AnXDwEe/3qbRALgapnugQ4mk=\", false, function () {\n  return [useDrag];\n});\n\nconst TaskListTableBody = props => {\n  return /*#__PURE__*/_jsxDEV(TableBody, {\n    children: _renderTasks(props.s.tasks, props.status, props.changeStatusOptionsOpen, props, props.s)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 3\n  }, this);\n};\n\n_c = TaskListTableBody;\nexport default TaskListTableBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskListTableBody\");","map":{"version":3,"sources":["/Users/collegia/Documents/projects/todolist/frontend/src/components/MainPage/Table/TaskListTableBody.js"],"names":["Button","TableBody","TableCell","TableRow","React","EditIcon","DeleteIcon","useDrag","ItemTypes","_renderCommonColumns","task","id","name","is_closed","status","formatted_created_date","deadline","actualStatus","props","handleChangeModal","taskModalOpen","find","_renderActionButtons","changeStatusOptionsOpen","undefined","getStatus","component","setState","taskId","history","push","erase","_renderTasks","tasks","drag","type","BOX","item","end","monitor","console","log","dropResult","getDropResult","alert","collect","isDragging","handlerId","getHandlerId","length","map","t","TaskListTableBody","s"],"mappings":"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","sourcesContent":["import {Button, TableBody, TableCell, TableRow} from \"@mui/material\";\nimport * as React from \"react\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {useDrag} from \"react-dnd\";\nimport {ItemTypes} from \"../../../Pages/Test\";\n\n\n/**\n * @param task\n * @param actualStatus\n * @returns {JSX.Element}\n * @private\n */\nconst _renderCommonColumns = (task = {\n\tid: null,\n\tname: \"\",\n\tis_closed: false,\n\tstatus: {\n\t\tname: \"\",\n\t},\n\tformatted_created_date: \"\",\n\tdeadline: \"\",\n}, actualStatus = {\n\tname: \"\",\n}, props = {\n\n}): JSX.Element => (\n\t<>\n\t\t<TableCell\n\t\t\tonClick={() => {\n\t\t\t\tprops?.handleChangeModal(props.taskModalOpen);\n\t\t\t\tprops.find(task.id);\n\t\t\t}}\n\t\t>\n\t\t\t{task?.id}\n\t\t</TableCell>\n\t\t<TableCell>\n\t\t\t{task?.name}\n\t\t</TableCell>\n\t\t<TableCell>\n\t\t\t{task?.is_closed ? \"Closed\" : \"Open\"}\n\t\t</TableCell>\n\t\t<TableCell>\n\t\t\t{actualStatus?.name}\n\t\t</TableCell>\n\t\t<TableCell>\n\t\t\t{task?.deadline}\n\t\t</TableCell>\n\t\t<TableCell>\n\t\t\t{task?.formatted_created_date}\n\t\t</TableCell>\n\t</>\n);\n\n\n/**\n * @param task\n * @param status\n * @param changeStatusOptionsOpen\n * @param props\n * @returns {JSX.Element}\n * @private\n */\nconst _renderActionButtons = (task, status, changeStatusOptionsOpen, props): JSX.Element => {\n\treturn (\n\t\t<TableCell>\n\t\t\t<Button\n\t\t\t\tid={task.id}\n\t\t\t\taria-expanded={changeStatusOptionsOpen ? 'true' : undefined}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tprops.getStatus();\n\t\t\t\t\tprops.component.setState({\n\t\t\t\t\t\tchangeStatusOptionsOpen: !changeStatusOptionsOpen,\n\t\t\t\t\t\ttaskId: task.id,\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tCHANGE STATUS\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tid={task.id}\n\t\t\t\taria-expanded={changeStatusOptionsOpen ? 'true' : undefined}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tprops.history.push(`/tasks/edit/${task.id}`);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<EditIcon/>\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tclassName={\"delete-button\"}\n\t\t\t\tid={task.id}\n\t\t\t\taria-expanded={changeStatusOptionsOpen ? 'true' : undefined}\n\t\t\t\tonClick={() => props.erase(task.id)}\n\t\t\t>\n\t\t\t\t<DeleteIcon/>\n\t\t\t</Button>\n\t\t</TableCell>\n\t);\n}\n\n/**\n * @param tasks\n * @param status\n * @param changeStatusOptionsOpen\n * @param props\n * @param actualStatus\n * @returns {JSX.Element|*}\n * @private\n */\nconst _renderTasks = (tasks, status, changeStatusOptionsOpen, props, actualStatus): JSX.Element | * => {\n\n\tconst [, drag] = useDrag(() => ({\n\t\ttype: ItemTypes.BOX,\n\t\titem: tasks,\n\t\tend: (item, monitor) => {\n\t\t\tconsole.log(item, monitor);\n\t\t\tconst dropResult = monitor.getDropResult();\n\t\t\tif (item && dropResult) {\n\t\t\t\talert(`You dropped ${item.name} into ${dropResult.name}!`);\n\t\t\t}\n\t\t},\n\t\tcollect: (monitor) => ({\n\t\t\tisDragging: monitor.isDragging(),\n\t\t\thandlerId: monitor.getHandlerId(),\n\t\t}),\n\t}));\n\n\tif (tasks.length > 0) {\n\t\treturn tasks.map((t) => {\n\t\t\treturn (\n\t\t\t\t<TableRow\n\t\t\t\t\tkey={t.id}\n\t\t\t\t\tdata-id={t.id}\n\t\t\t\t>\n\t\t\t\t\t{_renderCommonColumns(t, actualStatus)}\n\t\t\t\t\t{_renderActionButtons(t, status, changeStatusOptionsOpen, props)}\n\t\t\t\t</TableRow>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<TableRow>\n\t\t\t<TableCell colSpan={6}>\n\t\t\t\tNO TASKS FOUND\n\t\t\t</TableCell>\n\t\t</TableRow>\n\t)\n}\n\n/**\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nconst TaskListTableBody = (props): JSX.Element => {\n\treturn (\n\t\t<TableBody>\n\t\t\t{_renderTasks(props.s.tasks, props.status, props.changeStatusOptionsOpen, props, props.s)}\n\t\t</TableBody>\n\t);\n}\n\nexport default TaskListTableBody;"]},"metadata":{},"sourceType":"module"}