{"ast":null,"code":"import Request from \"../../utils/Request\";\nimport { DELETE_TASK, GET_TASKS, UPDATE_TASK } from \"./types\";\nexport const get = (relationships = []) => dispatch => {\n  dispatch({\n    type: GET_TASKS,\n    loading_tasks: true\n  });\n  let url = \"/tasks\";\n\n  if (relationships.length > 0) {\n    relationships = Request.parseParams(relationships);\n    url = `/tasks?${relationships}`;\n  }\n\n  Request.get(url).then(response => {\n    dispatch({\n      type: GET_TASKS,\n      loading_tasks: false,\n      tasks: response.data\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_TASKS,\n      loading_tasks: false\n    });\n    console.error(error);\n  });\n};\nexport const update = (id, body) => dispatch => {\n  if (id && body) {\n    dispatch({\n      type: UPDATE_TASK,\n      loading_tasks: true\n    });\n    Request.put(`/tasks/${id}`, body).then(() => {\n      dispatch(get());\n      dispatch({\n        type: UPDATE_TASK,\n        loading_tasks: false\n      });\n    }).catch(error => console.error(error));\n    dispatch({\n      type: UPDATE_TASK,\n      loading_tasks: false\n    });\n  }\n};\nexport const erase = id => dispatch => {\n  if (id) {\n    dispatch({\n      type: DELETE_TASK,\n      loading_tasks: true\n    });\n    Request.delete(`/tasks/${id}`).then(() => {\n      dispatch(get());\n      dispatch({\n        type: UPDATE_TASK,\n        loading_tasks: false\n      });\n    }).catch(error => console.error(error));\n  }\n};","map":{"version":3,"sources":["/Users/collegia/Documents/projects/todolist/frontend/src/actions/Tasks/index.js"],"names":["Request","DELETE_TASK","GET_TASKS","UPDATE_TASK","get","relationships","dispatch","type","loading_tasks","url","length","parseParams","then","response","tasks","data","catch","error","console","update","id","body","put","erase","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,WAAhC,QAAkD,SAAlD;AAGA,OAAO,MAAMC,GAAG,GAAG,CAACC,aAAa,GAAG,EAAjB,KAAwBC,QAAQ,IAAI;AACtDA,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEL,SADE;AAERM,IAAAA,aAAa,EAAE;AAFP,GAAD,CAAR;AAKA,MAAIC,GAAG,GAAG,QAAV;;AAEA,MAAIJ,aAAa,CAACK,MAAd,GAAuB,CAA3B,EAA8B;AAC7BL,IAAAA,aAAa,GAAGL,OAAO,CAACW,WAAR,CAAoBN,aAApB,CAAhB;AACAI,IAAAA,GAAG,GAAI,UAASJ,aAAc,EAA9B;AACA;;AAEDL,EAAAA,OAAO,CAACI,GAAR,CAAYK,GAAZ,EACEG,IADF,CACOC,QAAQ,IAAI;AAEjBP,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEL,SADE;AAERM,MAAAA,aAAa,EAAE,KAFP;AAGRM,MAAAA,KAAK,EAAED,QAAQ,CAACE;AAHR,KAAD,CAAR;AAKA,GARF,EASEC,KATF,CASQC,KAAK,IAAI;AACfX,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEL,SADE;AAERM,MAAAA,aAAa,EAAE;AAFP,KAAD,CAAR;AAIAU,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,GAfF;AAgBA,CA7BM;AA+BP,OAAO,MAAME,MAAM,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAcf,QAAQ,IAAI;AAC/C,MAAIc,EAAE,IAAIC,IAAV,EAAgB;AACff,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,WADE;AAERK,MAAAA,aAAa,EAAE;AAFP,KAAD,CAAR;AAKAR,IAAAA,OAAO,CAACsB,GAAR,CAAa,UAASF,EAAG,EAAzB,EAA4BC,IAA5B,EACET,IADF,CACO,MAAM;AACXN,MAAAA,QAAQ,CAACF,GAAG,EAAJ,CAAR;AACAE,MAAAA,QAAQ,CAAC;AACRC,QAAAA,IAAI,EAAEJ,WADE;AAERK,QAAAA,aAAa,EAAE;AAFP,OAAD,CAAR;AAIA,KAPF,EAQEQ,KARF,CAQQC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CARjB;AAUAX,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,WADE;AAERK,MAAAA,aAAa,EAAE;AAFP,KAAD,CAAR;AAIA;AACD,CAtBM;AAwBP,OAAO,MAAMe,KAAK,GAAIH,EAAD,IAAQd,QAAQ,IAAI;AACxC,MAAIc,EAAJ,EAAQ;AACPd,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEN,WADE;AAERO,MAAAA,aAAa,EAAE;AAFP,KAAD,CAAR;AAKAR,IAAAA,OAAO,CAACwB,MAAR,CAAgB,UAASJ,EAAG,EAA5B,EACER,IADF,CACO,MAAM;AACXN,MAAAA,QAAQ,CAACF,GAAG,EAAJ,CAAR;AACAE,MAAAA,QAAQ,CAAC;AACRC,QAAAA,IAAI,EAAEJ,WADE;AAERK,QAAAA,aAAa,EAAE;AAFP,OAAD,CAAR;AAIA,KAPF,EAQEQ,KARF,CAQQC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CARjB;AASA;AACD,CAjBM","sourcesContent":["import Request from \"../../utils/Request\";\nimport {DELETE_TASK, GET_TASKS, UPDATE_TASK} from \"./types\";\n\n\nexport const get = (relationships = []) => dispatch => {\n\tdispatch({\n\t\ttype: GET_TASKS,\n\t\tloading_tasks: true,\n\t});\n\n\tlet url = \"/tasks\";\n\n\tif (relationships.length > 0) {\n\t\trelationships = Request.parseParams(relationships);\n\t\turl = `/tasks?${relationships}`;\n\t}\n\n\tRequest.get(url)\n\t\t.then(response => {\n\n\t\t\tdispatch({\n\t\t\t\ttype: GET_TASKS,\n\t\t\t\tloading_tasks: false,\n\t\t\t\ttasks: response.data,\n\t\t\t});\n\t\t})\n\t\t.catch(error => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_TASKS,\n\t\t\t\tloading_tasks: false\n\t\t\t});\n\t\t\tconsole.error(error);\n\t\t});\n}\n\nexport const update = (id, body) => dispatch => {\n\tif (id && body) {\n\t\tdispatch({\n\t\t\ttype: UPDATE_TASK,\n\t\t\tloading_tasks: true,\n\t\t});\n\n\t\tRequest.put(`/tasks/${id}`, body)\n\t\t\t.then(() => {\n\t\t\t\tdispatch(get());\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_TASK,\n\t\t\t\t\tloading_tasks: false,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => console.error(error));\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_TASK,\n\t\t\tloading_tasks: false,\n\t\t});\n\t}\n}\n\nexport const erase = (id) => dispatch => {\n\tif (id) {\n\t\tdispatch({\n\t\t\ttype: DELETE_TASK,\n\t\t\tloading_tasks: true,\n\t\t});\n\n\t\tRequest.delete(`/tasks/${id}`)\n\t\t\t.then(() => {\n\t\t\t\tdispatch(get());\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_TASK,\n\t\t\t\t\tloading_tasks: false,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => console.error(error));\n\t}\n};"]},"metadata":{},"sourceType":"module"}