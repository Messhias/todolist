{"ast":null,"code":"var _jsxFileName = \"/Users/collegia/Documents/projects/todolist/frontend/src/Pages/AddNewTask.js\";\nimport React from \"react\";\nimport HeaderMenu from \"../components/HeaderMenu\";\nimport { Button, FormControl, Grid, MenuItem, OutlinedInput, Select } from \"@mui/material\";\nimport { connect } from \"react-redux\";\nimport { get } from \"../actions/Status\";\nimport { create, find, update } from \"../actions/Tasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddNewTask extends React.Component {\n  constructor(props) {\n    var _props$match$params$i, _props$match, _props$match$params;\n\n    super(props);\n    this.state = {\n      name: \"\",\n      status_id: \"\",\n      id: (_props$match$params$i = props === null || props === void 0 ? void 0 : (_props$match = props.match) === null || _props$match === void 0 ? void 0 : (_props$match$params = _props$match.params) === null || _props$match$params === void 0 ? void 0 : _props$match$params.id) !== null && _props$match$params$i !== void 0 ? _props$match$params$i : null,\n      action: () => {}\n    };\n    this.props.get();\n\n    if (this.state.id) {\n      this.props.find(this.state.id);\n    } else {}\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props !== prevProps) {\n      const {\n        status = []\n      } = this.props;\n\n      if (status.length > 0) {\n        let status_id = status.filter(s => s.name === \"OPEN\");\n\n        if (status_id.length > 0) {\n          status_id = status_id[0].id;\n          this.setState({\n            status_id\n          });\n        }\n      }\n\n      if (this.state.id) {\n        const {\n          task = {}\n        } = this.props;\n\n        if (task) {\n          const {\n            name = \"\",\n            status_id = \"\"\n          } = task;\n          this.setState({\n            name,\n            status_id\n          });\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      status = []\n    } = this.props,\n          {\n      name = \"\",\n      status_id = \"\"\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      id: \"main-page-container\",\n      xs: 12,\n      sm: 12,\n      lg: 12,\n      md: 12,\n      item: true,\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(HeaderMenu, {\n        history: this.props.history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n          placeholder: \"Task name\",\n          id: \"name\",\n          name: \"name\",\n          value: name,\n          onChange: event => this.setState({\n            name: event.target.value\n          }),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          label: \"Status\",\n          value: status_id,\n          onChange: event => this.setState({\n            status_id: event.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            disabled: true,\n            children: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"SELECT STATUS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 7\n          }, this), status.length > 0 && status.map(s => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: s.id,\n            children: s.name\n          }, s.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 9\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: () => {\n            if (this.state.id) {\n              this.props.update(this.state.id, {\n                name,\n                status_id\n              });\n            } else {\n              this.props.create({\n                name,\n                status_id\n              });\n            }\n          },\n          disabled: name === \"\" || status_id === \"\",\n          children: this.state.id ? \"EDIT TASK\" : \"ADD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return { ...state.StatusStore,\n    ...state.TasksStore\n  };\n};\n\nconst mapDispatchToProps = () => dispatch => ({\n  get: () => dispatch(get()),\n  create: data => dispatch(create(data)),\n  find: id => dispatch(find(id)),\n  update: (id, data) => dispatch(update(id, data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNewTask);","map":{"version":3,"sources":["/Users/collegia/Documents/projects/todolist/frontend/src/Pages/AddNewTask.js"],"names":["React","HeaderMenu","Button","FormControl","Grid","MenuItem","OutlinedInput","Select","connect","get","create","find","update","AddNewTask","Component","constructor","props","state","name","status_id","id","match","params","action","componentDidUpdate","prevProps","prevState","snapshot","status","length","filter","s","setState","task","render","history","event","target","value","map","mapStateToProps","StatusStore","TasksStore","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport HeaderMenu from \"../components/HeaderMenu\";\nimport {Button, FormControl, Grid, MenuItem, OutlinedInput, Select} from \"@mui/material\";\nimport {connect} from \"react-redux\";\nimport {get} from \"../actions/Status\";\nimport {create, find, update} from \"../actions/Tasks\";\n\nclass AddNewTask extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tname: \"\",\n\t\t\tstatus_id: \"\",\n\t\t\tid: props?.match?.params?.id ?? null,\n\t\t\taction: () => {\n\t\t\t},\n\t\t}\n\n\t\tthis.props.get();\n\n\t\tif (this.state.id) {\n\t\t\tthis.props.find(this.state.id);\n\n\t\t} else {\n\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS) {\n\t\tif (this.props !== prevProps) {\n\t\t\tconst {\n\t\t\t\tstatus = []\n\t\t\t} = this.props;\n\n\t\t\tif (status.length > 0) {\n\t\t\t\tlet status_id = status.filter(s => s.name === \"OPEN\");\n\n\t\t\t\tif (status_id.length > 0) {\n\t\t\t\t\tstatus_id = status_id[0].id;\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tstatus_id\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.state.id) {\n\t\t\t\tconst {\n\t\t\t\t\ttask = {}\n\t\t\t\t} = this.props;\n\n\t\t\t\tif (task) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tname = \"\",\n\t\t\t\t\t\tstatus_id = \"\",\n\t\t\t\t\t} = task;\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tstatus_id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\t\tstatus = []\n\t\t\t} = this.props,\n\t\t\t{\n\t\t\t\tname = \"\",\n\t\t\t\tstatus_id = \"\",\n\t\t\t} = this.state;\n\n\t\treturn (\n\t\t\t<Grid\n\t\t\t\tid={\"main-page-container\"}\n\t\t\t\txs={12}\n\t\t\t\tsm={12}\n\t\t\t\tlg={12}\n\t\t\t\tmd={12}\n\t\t\t\titem\n\t\t\t\tcontainer\n\t\t\t>\n\t\t\t\t<HeaderMenu history={this.props.history}/>\n\t\t\t\t<FormControl fullWidth>\n\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\tplaceholder={\"Task name\"}\n\t\t\t\t\t\tid={\"name\"}\n\t\t\t\t\t\tname={\"name\"}\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tname: event.target.value,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t/>\n\t\t\t\t</FormControl>\n\t\t\t\t<FormControl fullWidth>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tlabel=\"Status\"\n\t\t\t\t\t\tvalue={status_id}\n\t\t\t\t\t\tonChange={(event => this.setState({\n\t\t\t\t\t\t\tstatus_id: event.target.value,\n\t\t\t\t\t\t}))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuItem value={\"\"} disabled>\n\t\t\t\t\t\t\t<em>SELECT STATUS</em>\n\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus.length > 0 && status.map(s =>\n\t\t\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\t\t\tkey={s.id}\n\t\t\t\t\t\t\t\t\tvalue={s.id}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{s.name}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t\t<FormControl fullWidth>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant={\"outlined\"}\n\t\t\t\t\t\tonClick={() => {\n\n\t\t\t\t\t\t\tif (this.state.id) {\n\t\t\t\t\t\t\t\tthis.props.update(this.state.id, {\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tstatus_id,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.props.create({\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tstatus_id,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={name === \"\" || status_id === \"\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.id ? \"EDIT TASK\" : \"ADD\"\n\t\t\t\t\t\t}\n\t\t\t\t\t</Button>\n\t\t\t\t</FormControl>\n\t\t\t</Grid>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\t...state.StatusStore,\n\t\t...state.TasksStore,\n\t};\n}\n\nconst mapDispatchToProps = () => dispatch => ({\n\tget: () => dispatch(get()),\n\tcreate: (data) => dispatch(create(data)),\n\tfind: (id) => dispatch(find(id)),\n\tupdate: (id, data) => dispatch(update(id, data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNewTask);"]},"metadata":{},"sourceType":"module"}