{"ast":null,"code":"import Request from \"../../utils/Request\";\nimport { CREATE_TASKS, DELETE_TASK, FIND_TASKS, GET_TASKS, UPDATE_TASK } from \"./types\";\nimport { filterError } from \"../../utils/Helpers\";\nexport const get = function () {\n  let relationships = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return dispatch => {\n    dispatch({\n      type: GET_TASKS,\n      loading_tasks: true\n    });\n    let url = \"/tasks\";\n\n    if (relationships.length > 0) {\n      relationships = Request.parseParams(relationships);\n      url = `/tasks?${relationships}`;\n    }\n\n    Request.get(url).then(response => {\n      dispatch({\n        type: GET_TASKS,\n        loading_tasks: false,\n        tasks: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: GET_TASKS,\n        loading_tasks: false\n      });\n      filterError(error);\n    });\n  };\n};\nexport const update = (id, body) => dispatch => {\n  if (id && body) {\n    dispatch({\n      type: UPDATE_TASK,\n      loading_tasks: true\n    });\n    Request.put(`/tasks/${id}`, body).then(() => {\n      dispatch(get());\n      dispatch(find(id, ['status']));\n      dispatch({\n        type: UPDATE_TASK,\n        loading_tasks: false\n      });\n    }).catch(error => filterError(error));\n    dispatch({\n      type: UPDATE_TASK,\n      loading_tasks: false\n    });\n  }\n};\nexport const erase = id => dispatch => {\n  if (id) {\n    dispatch({\n      type: DELETE_TASK,\n      loading_tasks: true\n    });\n    Request.delete(`/tasks/${id}`).then(() => {\n      dispatch(get());\n      dispatch({\n        type: UPDATE_TASK,\n        loading_tasks: false\n      });\n    }).catch(error => filterError(error));\n  }\n};\nexport const create = function () {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return dispatch => {\n    if (data) {\n      dispatch({\n        type: CREATE_TASKS,\n        loading_tasks: true,\n        tasks_errors: {}\n      });\n      Request.post(\"/tasks\", data).then(() => dispatch(get())).catch(error => {\n        var _error$response$data, _error$response;\n\n        dispatch({\n          type: CREATE_TASKS,\n          loading_tasks: false,\n          tasks_errors: (_error$response$data = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) !== null && _error$response$data !== void 0 ? _error$response$data : {}\n        });\n        filterError(error);\n      });\n    }\n  };\n};\nexport const find = function (id) {\n  let relationships = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return dispatch => {\n    dispatch({\n      type: FIND_TASKS,\n      loading_tasks: true,\n      tasks_errors: {},\n      tasks: {}\n    });\n\n    if (id) {\n      let url = `/tasks/${id}`;\n\n      if (relationships.length > 0) {\n        relationships = Request.parseParams(relationships);\n        url += `?${relationships}`;\n      }\n\n      Request.get(url).then(response => {\n        dispatch({\n          type: FIND_TASKS,\n          task: response === null || response === void 0 ? void 0 : response.data,\n          loading_tasks: false\n        }); // dispatch(find(id));\n      }).catch(error => {\n        var _error$response$data2, _error$response2;\n\n        filterError(error);\n        dispatch({\n          type: FIND_TASKS,\n          loading_tasks: false,\n          tasks_errors: (_error$response$data2 = error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) !== null && _error$response$data2 !== void 0 ? _error$response$data2 : {}\n        });\n      });\n    } else {\n      dispatch(get([\"status\"]));\n    }\n  };\n};\nexport const history = id => dispatch => {\n  if (id) {\n    Request.get(`/tasks/history/${id}`).then(response => console.log(response));\n  }\n};","map":{"version":3,"sources":["/Users/collegia/Documents/projects/todolist/frontend/src/actions/Tasks/index.js"],"names":["Request","CREATE_TASKS","DELETE_TASK","FIND_TASKS","GET_TASKS","UPDATE_TASK","filterError","get","relationships","dispatch","type","loading_tasks","url","length","parseParams","then","response","tasks","data","catch","error","update","id","body","put","find","erase","delete","create","tasks_errors","post","task","history","console","log"],"mappings":"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","sourcesContent":["import Request from \"../../utils/Request\";\nimport {CREATE_TASKS, DELETE_TASK, FIND_TASKS, GET_TASKS, UPDATE_TASK} from \"./types\";\nimport {filterError} from \"../../utils/Helpers\";\n\n\nexport const get = (relationships = []) => dispatch => {\n\tdispatch({\n\t\ttype: GET_TASKS,\n\t\tloading_tasks: true,\n\t});\n\n\tlet url = \"/tasks\";\n\n\tif (relationships.length > 0) {\n\t\trelationships = Request.parseParams(relationships);\n\t\turl = `/tasks?${relationships}`;\n\t}\n\n\tRequest.get(url)\n\t\t.then(response => {\n\n\t\t\tdispatch({\n\t\t\t\ttype: GET_TASKS,\n\t\t\t\tloading_tasks: false,\n\t\t\t\ttasks: response.data,\n\t\t\t});\n\t\t})\n\t\t.catch(error => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_TASKS,\n\t\t\t\tloading_tasks: false\n\t\t\t});\n\t\t\tfilterError(error);\n\t\t});\n}\n\nexport const update = (id, body) => dispatch => {\n\tif (id && body) {\n\t\tdispatch({\n\t\t\ttype: UPDATE_TASK,\n\t\t\tloading_tasks: true,\n\t\t});\n\n\t\tRequest.put(`/tasks/${id}`, body)\n\t\t\t.then(() => {\n\t\t\t\tdispatch(get());\n\t\t\t\tdispatch(find(id, [\n\t\t\t\t\t'status',\n\t\t\t\t]));\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_TASK,\n\t\t\t\t\tloading_tasks: false,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => filterError(error));\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_TASK,\n\t\t\tloading_tasks: false,\n\t\t});\n\t}\n}\n\nexport const erase = (id) => dispatch => {\n\tif (id) {\n\t\tdispatch({\n\t\t\ttype: DELETE_TASK,\n\t\t\tloading_tasks: true,\n\t\t});\n\n\t\tRequest.delete(`/tasks/${id}`)\n\t\t\t.then(() => {\n\t\t\t\tdispatch(get());\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_TASK,\n\t\t\t\t\tloading_tasks: false,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => filterError(error));\n\t}\n};\n\nexport const create = (data = {}) => dispatch => {\n\tif (data) {\n\t\tdispatch({\n\t\t\ttype: CREATE_TASKS,\n\t\t\tloading_tasks: true,\n\t\t\ttasks_errors: {},\n\t\t});\n\t\tRequest.post(\"/tasks\", data)\n\t\t\t.then(() => dispatch(get()))\n\t\t\t.catch(error => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: CREATE_TASKS,\n\t\t\t\t\tloading_tasks: false,\n\t\t\t\t\ttasks_errors: error?.response?.data ?? {},\n\t\t\t\t});\n\t\t\t\tfilterError(error);\n\t\t\t});\n\t}\n}\n\nexport const find = (id, relationships = []) => dispatch => {\n\tdispatch({\n\t\ttype: FIND_TASKS,\n\t\tloading_tasks: true,\n\t\ttasks_errors: {},\n\t\ttasks: {},\n\t});\n\tif (id) {\n\t\tlet url = `/tasks/${id}`;\n\n\t\tif (relationships.length > 0) {\n\t\t\trelationships = Request.parseParams(relationships);\n\t\t\turl += `?${relationships}`;\n\t\t}\n\n\t\tRequest.get(url)\n\t\t\t.then((response) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: FIND_TASKS,\n\t\t\t\t\ttask: response?.data,\n\t\t\t\t\tloading_tasks: false,\n\t\t\t\t});\n\t\t\t\t// dispatch(find(id));\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tfilterError(error);\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: FIND_TASKS,\n\t\t\t\t\tloading_tasks: false,\n\t\t\t\t\ttasks_errors: error?.response?.data ?? {},\n\t\t\t\t});\n\t\t\t});\n\t} else {\n\t\tdispatch(get([\n\t\t\t\"status\"\n\t\t]));\n\t}\n};\n\nexport const history = (id) => dispatch => {\n\tif (id) {\n\t\tRequest.get(`/tasks/history/${id}`)\n\t\t\t.then(response => console.log(response));\n\t}\n}"]},"metadata":{},"sourceType":"module"}